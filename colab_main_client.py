# –û—Å–Ω–æ–≤–Ω–æ–π Discord –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã -
# by Wokashi RG -
# https://github.com/wokashi-rg -
# –ê–≤—Ç–æ—Ä —è–∫–∏–π –∑—Ä–æ–±–∏–≤ –±–æ—Ç–∞ –¥–ª—è Discord
#-----------------------------------------
# –ü–µ—Ä–µ–ø–∏—Å–∞–≤ –±–æ—Ç–∞ –ø—ñ–¥ Telegram
# Koval Yaroslav
# https://github.com/koval01 | https://t.me/koval_yaroslav
# –ü–µ—Ä—à–∞ –≤–µ—Ä—Å—ñ—è 30.07.2020 (Beta 1)
# –î—Ä—É–≥–∞ –≤–µ—Ä—Å—ñ—è 31.07.2020 (Beta 2)

import logging
from uptime import uptime
from datetime import datetime
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineQuery, \
    InputTextMessageContent, InlineQueryResultArticle, Dice
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.utils.exceptions import Throttled
from collections import Counter
import sentry_sdk
import requests
import time
import string
import json
import platform
import schedule
import collections
import random
import asyncio
import config
from tokenizer import Tokenizer
from utils.tprint import current_time, log
import predictor

# –ó–∞–±–ª–æ–∫–æ–≤–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ (–°—Ç–∞—Ç–∏—á–Ω–∏–π —Å–ø–∏—Å–æ–∫)
bannedusers = []

# sentry –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–º–∏–ª–æ–∫ –≤ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–º—É —Ä–µ–∂–∏–º—ñ
sentry_sdk.init("https://28a8cabcfd5d408aa493a18a8c667881@sentry.io/5175066")

# —Ä—ñ–≤–µ–Ω—å –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)

# —ñ–Ω–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
#bot = Bot(token=str(config.token), parse_mode="HTML")
token_bot = input("Telegram bot token: ")
bot = Bot(token=str(token_bot))
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

temperature = config.temperature
tokenizer = Tokenizer()
tokenizer.load_vocab_from_file(config.vocab_file)
channel_deques = {}
custom_emoji_collection = []

# async def set_temperature(value): # –ù–µ –∑–∞–¥–µ–π—Å—Ç–≤–æ–≤–∞–Ω–æ
#     try:
#         temperature = float(value)
#     except ValueError:
#         return False
#     if temperature <= 0:
#         return False
#     return True

# –©–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø—Ä–∏ –ø–µ—Ä—à–æ–º—É –∑–Ω–∞–π–æ–º—Å—Ç–≤—ñ
@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    try:
        await dp.throttle('start', rate=2)
    except Throttled:
        await message.reply('–í–æ—É! –ù–µ —Ç–∞–∫ –±—ã—Å—Ç—Ä–æ. (–ó–∞—â–∏—Ç–∞ –æ—Ç —Ñ–ª—É–¥–∞)')
    else:
        log(str('ID {} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∫–æ–º–∞–Ω–¥—É - "/start"').format(str(message.from_user.id)))
        await message.reply('–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è —Å–æ–∑–¥–∞–ª @koval_yaroslav. –û—Å–Ω–æ–≤–Ω–∞—è –º–æ—è –∑–∞–¥–∞—á–∞ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø–∞—Ö, –Ω–æ —è –º–æ–≥—É –æ—Ç–≤–µ—á–∞—Ç—å –∏ –≤ –ø—Ä–∏–≤–∞—Ç–µ. –ù—É, —á—Ç–æ –∂–µ –ø–æ–æ–±—â–∞–µ–º—Å—è?')
        await message.reply('Ver. Beta 2 (310720)\n–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ: {} {}\n–ê–ø—Ç–∞–π–º: {} —Å–µ–∫—É–Ω–¥'.format(platform.platform(), platform.python_version(), uptime()))
        if message.from_user.id != config.ADMIN:
            await bot.send_message(config.ADMIN,'{}–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ ID - {} - –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–≤ /start'.format(current_time(), int(message.from_user.id)))

# –ö–æ–º–∞–Ω–¥–∞ –¥–æ–ø–æ–º–æ–≥–∏
@dp.message_handler(commands=['help'])
async def help(message: types.Message):
    try:
        await dp.throttle('help', rate=2)
    except Throttled:
        await message.reply('–í–æ—É! –ù–µ —Ç–∞–∫ –±—ã—Å—Ç—Ä–æ. (–ó–∞—â–∏—Ç–∞ –æ—Ç —Ñ–ª—É–¥–∞)')
    else:
        log(str('ID {} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∫–æ–º–∞–Ω–¥—É - "/help"').format(str(message.from_user.id)))
        await message.reply("/start - –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞\n/help - –∏–Ω—Ñ–æ\n/dice - –º–æ–≥—É –∫–∏–Ω—É—Ç—å –∫—É–±–∏–∫")
        if message.from_user.id == config.ADMIN:
            await message.reply('/send - –±–µ–∑ –ø—ñ–¥–ø–∏—Å—É, /asend - –∑ –ø—ñ–¥–ø–∏—Å–æ–º')

# –ì—Ä–∞–ª—å–Ω–∏–π –∫—É–±–∏–∫
@dp.message_handler(commands=['dice'])
async def help(message: types.Message):
    try:
        await dp.throttle('dice', rate=2)
    except Throttled:
        await message.reply('–í–æ—É! –ù–µ —Ç–∞–∫ –±—ã—Å—Ç—Ä–æ. (–ó–∞—â–∏—Ç–∞ –æ—Ç —Ñ–ª—É–¥–∞)')
    else:
        log(str('ID {} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∫–æ–º–∞–Ω–¥—É - "/dice"').format(str(message.from_user.id)))
        await message.reply_dice('üé≤')

@dp.message_handler(content_types=['text'])
async def handle_message_received(message):
    await bot.send_chat_action(int(message.from_user.id), "typing") # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ç–µ, —â–æ –±–æ—Ç –ø–∏—à–µ
    data_wait = await message.reply('–î—É–º–∞—é...') # –°—Ç–≤–æ—Ä—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —è–∫–µ –±—É–¥–µ–º–æ —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏
    data_wait = str(data_wait) # –ü–µ—Ä–µ–≤–æ–¥–∏–º–æ –≤ —Å—Ç—Ä–æ–∫—É
    data_wait = data_wait.replace('{"message_id": ', '') # –û–±—Ä—ñ–∑–∞—î–º–æ –ø–æ—á–∞—Ç–æ–∫
    data_wait = data_wait[:data_wait.find(',')] # –û–±—Ä—ñ–∑–∞—î–º–æ –∫—ñ–Ω–µ—Ü—å
    #-------------------------------------LOG----------------------------------
    log(str('ID {} –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç—É - "{}"').format(int(message.from_user.id), str(message.text))) # –õ–û–≥ –≤ –∫–æ–Ω—Å–æ–ª—å
    #--------------------------------------------------------------------------
    await bot.send_chat_action(int(message.from_user.id), "typing") # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ç–µ, —â–æ –±–æ—Ç –ø–∏—à–µ
    input_messages = str(message.text) # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ–Ω—Å—Ç–∞—Ç–Ω—É –¥–ª—è –ø–µ—Ä–µ–¥–∞—á—ñ —Ç–µ–∫—Ç—Å—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    input_tensor = tokenizer.encode_input(input_messages, message.from_user.id) # –ü–µ—Ä–µ–¥–∞—î–º–æ —Ç–µ–∫—Å—Ç —ñ —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–æ–∫–µ–Ω—ñ–∑–∞—Ç–æ—Ä—É
    #--------------------------------------------------------------------------
    await bot.send_chat_action(int(message.from_user.id), "typing") # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ç–µ, —â–æ –±–æ—Ç –ø–∏—à–µ
    output_tensor = predictor.decode_sequence(input_tensor, temperature) # –¢–µ–Ω–∑–æ—Ä
    await bot.send_chat_action(int(message.from_user.id), "typing") # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ç–µ, —â–æ –±–æ—Ç –ø–∏—à–µ
    output_message, token_count = tokenizer.decode_output(input_messages, output_tensor) # –í—ñ–¥–ø–æ–≤—ñ–¥—å –±–æ—Ç–∞, –æ–±—Ä–æ–±–ª–µ–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    if config.use_delay:
        await bot.send_chat_action(int(message.from_user.id), "typing") # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ç–µ, —â–æ –±–æ—Ç –ø–∏—à–µ
        await asyncio.sleep(random.uniform(0.1, 0.2)*token_count) # –°–∏–º—É–ª—è—Ü—ñ—é –Ω–∞–±–æ—Ä—É —Ç–µ–∫—Ç—Å–∞, –≥–µ–Ω–µ—Ä—É—î—Ç—å—Å—è –≤–∏–ø–∞–¥–∫–æ–≤–µ —á–∏—Å–ª–æ –≤—ñ–¥ 0.1 –¥–æ 0.2 —ñ –º–Ω–æ–∂–∏—Ç—å –Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–∫–µ–Ω—ñ–≤
    if output_message:
        await bot.edit_message_text(
            text=str(output_message[:2000]),
            chat_id=int(message.from_user.id),
            message_id=int(data_wait),
        ) # –ó–∞–º—ñ–Ω—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è "–î—É–º–∞—é..." –Ω–∞ –∫—ñ–Ω—Ü–µ–≤–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        log(str('ID {} –ø–æ–ª—É—á–∏–ª –æ—Ç–≤–µ—Ç - "{}"').format(str(message.from_user.id), str(output_message[:2000]))) # –ù–∞–¥—Å–∏–ª–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –≤ –∫–æ–Ω—Å–æ–ª—å\—Ç–µ—Ä–º—ñ–Ω–∞–ª\—à–µ–ª–ª
        if message.from_user.id != config.ADMIN:
            await bot.send_message(config.ADMIN, str('{}ID {} –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ "{}" –∏ –ø–æ–ª—É—á–∏–ª –æ—Ç–≤–µ—Ç "{}"').format(
                current_time(), 
                str(message.from_user.id), 
                str(message.text), 
                str(output_message[:2000]
                ))) # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    

if __name__ == '__main__':
    #dp.loop.create_task(handle_message_received(10))
    # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—à–Ω–∏–π –∑–∞–ø—É—Å–∫
    log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.')
    #---------------------------------------------
    executor.start_polling(dp, skip_updates=False)
